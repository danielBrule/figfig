name: Dev DeploymentMore actions

on:
  workflow_run:
    workflows: ["Run Unit Tests"]   # 👈 exact name of the first workflow
    branches:   ["dev"]             # only when that workflow ran on dev
    types:      [completed]

permissions:
  id-token: write
  contents: read

jobs:
  build-image:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_USE_OIDC: true
      TF_VAR_USE_OIDC: true
      TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
      TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
      TF_VAR_env: dev
      TF_VAR_location: ${{ secrets.TF_DEV_LOCATION }}
      TF_VAR_project_name: ${{ secrets.TF_DEV_PROJECT_NAME }}
      TF_VAR_resource_group_name: ${{ secrets.TF_DEV_RESOURCE_GROUP_NAME }}
      TF_VAR_acr_name: ${{ secrets.TF_DEV_ACR_NAME }}
      TF_VAR_image_name: ${{ secrets.TF_DEV_IMAGE_NAME }}
      TF_VAR_sql_admin: ${{ secrets.TF_DEV_SQL_ADMIN }}
      TF_VAR_sql_password: ${{ secrets.TF_DEV_SQL_PASSWORD }}
      TF_VAR_keyvault_name: ${{ secrets.TF_DEV_KEYVAULT_NAME }}

    steps:
      - name: 🔄 Checkout repository
        uses: actions/checkout@v4

      - name: 🔐 Azure Login with OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 🧱 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Test Blob Access
        run: |
          az storage blob list --account-name figfigtfstatedev --container-name tfstate --auth-mode login


      - name: 🚀 Terraform Init
        working-directory: terraform
        run: terraform init -backend-config="envs/dev/backend.tf"

      - name: ⚙️ Terraform Apply Core (Network, RG)
        working-directory: terraform
        run: terraform apply -auto-approve -lock-timeout=300s -target="azurerm_resource_group.main" -target="module.network" -lock=false

      - name: ⚙️ Terraform ACR 
        working-directory: terraform
        run: terraform apply -auto-approve -lock-timeout=300s  -target="module.acr"

#      - name: ⚙️ Terraform containers 
#        working-directory: terraform
#        run: terraform apply -auto-approve -lock-timeout=300s  -target="module.containers"

      - name: 🔑 Docker Login to ACR
        run: az acr login --name ${{ secrets.TF_DEV_ACR_NAME }}dev


      - name: 🛠 Build Docker Image
        run: docker build -f docker/Dockerfile --build-arg ENV=dev -t ${{ secrets.TF_DEV_ACR_NAME }}dev.azurecr.io/figfig-app:latest .

      - name: 📤 Push Docker Image
        run: docker push ${{ secrets.TF_DEV_ACR_NAME }}dev.azurecr.io/figfig-app:latest

      - name: 🔓 Cleanup State Lock (if needed)
        if: failure()
        working-directory: terraform
        run: |
          echo "🔄 Attempting to unlock state (if locked)..."
          LOCK_ID=$(terraform force-unlock --dry-run 2>&1 | grep -oP 'Lock ID: \K\S+') || true
          if [ ! -z "$LOCK_ID" ]; then
            echo "⚠️ Unlocking stuck state with ID: $LOCK_ID"
            terraform force-unlock -force "$LOCK_ID"
          else
            echo "✅ No lock found."
          fi

  deploy-infra:
    runs-on: ubuntu-latest
    needs: build-image
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_USE_OIDC: true
      TF_VAR_USE_OIDC: true
      TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
      TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
      TF_VAR_env: dev
      TF_VAR_location: ${{ secrets.TF_DEV_LOCATION }}
      TF_VAR_project_name: ${{ secrets.TF_DEV_PROJECT_NAME }}
      TF_VAR_resource_group_name: ${{ secrets.TF_DEV_RESOURCE_GROUP_NAME }}
      TF_VAR_acr_name: ${{ secrets.TF_DEV_ACR_NAME }}
      TF_VAR_image_name: ${{ secrets.TF_DEV_IMAGE_NAME }}
      TF_VAR_sql_admin: ${{ secrets.TF_DEV_SQL_ADMIN }}
      TF_VAR_sql_password: ${{ secrets.TF_DEV_SQL_PASSWORD }}
      TF_VAR_keyvault_name: ${{ secrets.TF_DEV_KEYVAULT_NAME }}

    steps:
      - name: 🔄 Checkout repository
        uses: actions/checkout@v4

      - name: 🔐 Azure Login with OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 🧱 Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: 🚀 Terraform Init
        working-directory: terraform
        run: terraform init -backend-config="envs/dev/backend.tf"

      - name: 🧬 Import existing Key Vault secrets and access policies (if needed)
        working-directory: terraform
        shell: bash
        run: |
          set -eu
          echo "🔍 Importing secrets and access policies if not already in state..."

          KV_NAME="${{ secrets.TF_DEV_KEYVAULT_NAME }}"
          RG_NAME="${{ secrets.TF_DEV_RESOURCE_GROUP_NAME }}-dev"
          SUB_ID="${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          CLIENT_ID="${{ secrets.AZURE_CLIENT_ID }}"
          UAI_NAME="figfig-aci-identity"
          

          echo "🔎 Fetching object IDs via Azure CLI + Microsoft Graph..."

          CLIENT_OBJECT_ID=$(az rest --method GET \
            --uri "https://graph.microsoft.com/v1.0/servicePrincipals?\$filter=appId eq '${CLIENT_ID}'" \
            --query "value[0].id" -o tsv || echo "")

          if [ -z "$CLIENT_OBJECT_ID" ]; then
            echo "❌ Failed to retrieve CLIENT_OBJECT_ID via Microsoft Graph"
            exit 1
          fi

          echo "✅ CLIENT_OBJECT_ID: $CLIENT_OBJECT_ID"
          GITHUB_OIDC_OBJECT_ID="$CLIENT_OBJECT_ID"

          UAI_OBJECT_ID=$(az identity show --name "$UAI_NAME" --resource-group "$RG_NAME" --query principalId -o tsv || echo "")
          echo "✅ UAI_OBJECT_ID: $UAI_OBJECT_ID"

          ### Import db-password secret only if it exists
          echo "▶️ Checking db-password secret..."
          if az keyvault secret show --vault-name "$KV_NAME" --name "db-password" > /dev/null 2>&1; then
            if ! terraform state show module.keyvault.azurerm_key_vault_secret.sql > /dev/null 2>&1; then
              echo "📦 Importing db-password secret"
              DB_SECRET_ID=$(az keyvault secret show --vault-name "$KV_NAME" --name "db-password" --query id -o tsv)
              terraform import module.keyvault.azurerm_key_vault_secret.sql "$DB_SECRET_ID"
            else
              echo "✅ db-password already managed."
            fi
          else
            echo "⚠️ db-password secret does not exist, skipping import."
          fi

          ### Import servicebus-conn-string secret only if it exists
          echo "▶️ Checking servicebus-conn-string secret..."
          if az keyvault secret show --vault-name "$KV_NAME" --name "servicebus-conn-string" > /dev/null 2>&1; then
            if ! terraform state show module.keyvault.azurerm_key_vault_secret.sb_conn > /dev/null 2>&1; then
              echo "📦 Importing servicebus-conn-string secret"
              SB_SECRET_ID=$(az keyvault secret show --vault-name "$KV_NAME" --name "servicebus-conn-string" --query id -o tsv)
              terraform import module.keyvault.azurerm_key_vault_secret.sb_conn "$SB_SECRET_ID"
            else
              echo "✅ servicebus-conn-string already managed."
            fi
          else
            echo "⚠️ servicebus-conn-string does not exist, skipping import."
          fi

          ### Import Terraform SP access policy
          echo "▶️ Checking Terraform access policy..."
          if terraform state show module.keyvault.azurerm_key_vault_access_policy.terraform > /dev/null 2>&1; then
            echo "✅ Terraform access policy already managed."
          else
            echo "📦 Importing Terraform access policy"
            terraform import module.keyvault.azurerm_key_vault_access_policy.terraform \
              "/subscriptions/${SUB_ID}/resourceGroups/${RG_NAME}/providers/Microsoft.KeyVault/vaults/${KV_NAME}/objectId/${CLIENT_OBJECT_ID}"
          fi

          ### Import GitHub OIDC access policy
          echo "▶️ Checking GitHub OIDC access policy..."
          if terraform state show module.keyvault.azurerm_key_vault_access_policy.github_oidc > /dev/null 2>&1; then
            echo "✅ GitHub OIDC access policy already managed."
          else
            echo "📦 Importing GitHub OIDC access policy"
            terraform import module.keyvault.azurerm_key_vault_access_policy.github_oidc \
              "/subscriptions/${SUB_ID}/resourceGroups/${RG_NAME}/providers/Microsoft.KeyVault/vaults/${KV_NAME}/objectId/${GITHUB_OIDC_OBJECT_ID}"
          fi

          ### Optional: Import ACI Identity access policy
          echo "▶️ Checking ACI identity access policy..."
          if terraform state show module.keyvault.azurerm_key_vault_access_policy.aci_identity > /dev/null 2>&1; then
            echo "✅ ACI identity access policy already managed."
          elif [ -n "$UAI_OBJECT_ID" ]; then
            echo "📦 Importing ACI identity access policy"
            terraform import module.keyvault.azurerm_key_vault_access_policy.aci_identity \
              "/subscriptions/${SUB_ID}/resourceGroups/${RG_NAME}/providers/Microsoft.KeyVault/vaults/${KV_NAME}/objectId/${UAI_OBJECT_ID}"
          else
            echo "⚠️ ACI identity not found, skipping..."
          fi

                    ### Import GitHub OIDC access policy
          echo "▶️ Checking GitHub OIDC access policy..."
          if terraform state show module.keyvault.azurerm_key_vault_access_policy.github_oidc > /dev/null 2>&1; then
            echo "✅ GitHub OIDC access policy already managed."
          else
            echo "📦 Importing GitHub OIDC access policy"
            terraform import module.keyvault.azurerm_key_vault_access_policy.github_oidc \
              "/subscriptions/${SUB_ID}/resourceGroups/${RG_NAME}/providers/Microsoft.KeyVault/vaults/${KV_NAME}/objectId/${GITHUB_OIDC_OBJECT_ID}"
          fi
          
          ### Import container access policy
          echo "▶️ Checking container access policy..."
          if terraform state show module.keyvault.azurerm_key_vault_access_policy.container_runtime > /dev/null 2>&1; then
            echo "✅ container access policy already managed."
          else
            echo "📦 Importing container access policy"
            terraform import module.keyvault.azurerm_key_vault_access_policy.container_runtime \
              "/subscriptions/${SUB_ID}/resourceGroups/${RG_NAME}/providers/Microsoft.KeyVault/vaults/${KV_NAME}/objectId/${GITHUB_OIDC_OBJECT_ID}"
          fi


      - name: 🔄 Refresh Terraform State
        working-directory: terraform
        run: terraform refresh

      - name: ⚙️ Terraform Apply Remaining Infra
        working-directory: terraform
        run: terraform apply -auto-approve -lock-timeout=300s

      - name: 🔓 Cleanup State Lock (if needed)
        if: failure()
        working-directory: terraform
        run: |
          echo "🔄 Attempting to unlock state (if locked)..."
          LOCK_ID=$(terraform force-unlock --dry-run 2>&1 | grep -oP 'Lock ID: \K\S+') || true
          if [ ! -z "$LOCK_ID" ]; then
            echo "⚠️ Unlocking stuck state with ID: $LOCK_ID"
            terraform force-unlock -force "$LOCK_ID"
          else
            echo "✅ No lock found."
          fi