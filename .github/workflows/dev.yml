name: Dev Deployment

on:
  push:
    branches: ["dev"]

permissions:
  id-token: write
  contents: read


jobs:
  build-image:
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ENV: dev
      LOCATION: ${{ secrets['TF_DEV_LOCATION'] }}
      PROJECT_NAME: ${{ secrets['TF_DEV_PROJECT_NAME'] }}
      RESOURCE_GROUP_NAME: ${{ secrets['TF_DEV_RESOURCE_GROUP_NAME'] }}
      ACR_NAME: ${{ secrets['TF_DEV_ACR_NAME'] }}
      IMAGE_NAME: ${{ secrets['TF_DEV_IMAGE_NAME'] }}
      SQL_ADMIN: ${{ secrets['TF_DEV_SQL_ADMIN'] }}
      SQL_PASSWORD: ${{ secrets['TF_DEV_SQL_PASSWORD'] }}
      KEYVAULT_NAME: ${{ secrets['TF_DEV_KEYVAULT_NAME'] }}
      ARM_USE_OIDC: true

    steps:
      - name: üîÑ Checkout repository
        uses: actions/checkout@v4

      - name: üîê Azure Login with OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: üß± Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: üöÄ Init Terraform (for import)
        working-directory: terraform
        run: terraform init -backend-config="envs/dev/backend.tf"

      - name: üì¶ Check Resource Group State
        working-directory: terraform
        run: |
              if ! terraform state list | grep -q azurerm_resource_group.main; then
                echo "‚è≥ Resource group not in state ‚Äî attempting import with timeout..."
                timeout 90s terraform import -lock-timeout=60s azurerm_resource_group.main "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.TF_DEV_RESOURCE_GROUP_NAME }}"
                IMPORT_STATUS=$?
                if [ $IMPORT_STATUS -eq 124 ]; then
                  echo "‚ùå Import timed out ‚Äî possible state lock. Investigate backend manually."
                  exit 1
                fi
              else
                echo "‚úÖ Resource group already in state ‚Äî skipping import."
              fi

      - name: üì¶ Check ACR State
        working-directory: terraform
        run: |
          terraform state list | grep module.acr.azurerm_container_registry.acr || \
          terraform import -lock-timeout=60s module.acr.azurerm_container_registry.acr "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/FigFigRG-dev/providers/Microsoft.ContainerRegistry/registries/figfigacrdev"

      - name: üì¶ Check Virtual Network
        working-directory: terraform
        run: |
          terraform state list | grep module.network.azurerm_virtual_network.vnet || \
          terraform import -lock-timeout=60s module.network.azurerm_virtual_network.vnet "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/FigFigRG-dev/providers/Microsoft.Network/virtualNetworks/my-vnet-dev"

      - name: üì¶ Check Subnet
        working-directory: terraform
        run: |
          terraform state list | grep module.network.azurerm_subnet.public || \
          terraform import -lock-timeout=60s module.network.azurerm_subnet.public "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/FigFigRG-dev/providers/Microsoft.Network/virtualNetworks/my-vnet-dev/subnets/public-subnet-dev"

      - name: ‚öôÔ∏è Terraform Apply Core (Network, ACR)
        working-directory: terraform
        run: |
          terraform init -backend-config="envs/dev/backend.tf"
          terraform apply -lock-timeout=300s -auto-approve -var-file="envs/dev/terraform.tfvars" \
            -target=module.network -target=module.acr

      - name: üîë Docker Login to ACR
        run: az acr login --name figfigacrdev

      - name: üõ† Build Docker Image
        run: docker build -f docker/Dockerfile --build-arg ENV=dev -t figfigacrdev.azurecr.io/figfig-app:latest .

      - name: üì§ Push Docker Image
        run: docker push figfigacrdev.azurecr.io/figfig-app:latest

  deploy-infra:
    runs-on: ubuntu-latest
    needs: build-image
    env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ENV: ${{ secrets['TF_DEV_ENV'] }}
        LOCATION: ${{ secrets['TF_DEV_LOCATION'] }}
        PROJECT_NAME: ${{ secrets['TF_DEV_PROJECT_NAME'] }}
        RESOURCE_GROUP_NAME: ${{ secrets['TF_DEV_RESOURCE_GROUP_NAME'] }}
        ACR_NAME: ${{ secrets['TF_DEV_ACR_NAME'] }}
        IMAGE_NAME: ${{ secrets['TF_DEV_IMAGE_NAME'] }}
        SQL_ADMIN: ${{ secrets['TF_DEV_SQL_ADMIN'] }}
        SQL_PASSWORD: ${{ secrets['TF_DEV_SQL_PASSWORD'] }}
        KEYVAULT_NAME: ${{ secrets['TF_DEV_KEYVAULT_NAME'] }}
        ARM_USE_OIDC: true
    steps:
      - name: üîÑ Checkout repository
        uses: actions/checkout@v4

      - name: üîê Azure Login with OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: üß± Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: ‚öôÔ∏è Terraform Apply Remaining Infra
        working-directory: terraform
        run: |
          terraform init -backend-config="envs/dev/backend.tf"
          terraform apply -lock-timeout=300s -auto-approve -var-file="envs/dev/terraform.tfvars"
