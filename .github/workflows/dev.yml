name: Dev Deployment

on:
  push:
    branches: ["dev"]

permissions:
  id-token: write
  contents: read

jobs:
  build-image:
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_USE_OIDC: true
      TF_VAR_USE_OIDC: true
      TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
      TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
      TF_VAR_env: dev
      TF_VAR_location: ${{ secrets.TF_DEV_LOCATION }}
      TF_VAR_project_name: ${{ secrets.TF_DEV_PROJECT_NAME }}
      TF_VAR_resource_group_name: ${{ secrets.TF_DEV_RESOURCE_GROUP_NAME }}
      TF_VAR_acr_name: ${{ secrets.TF_DEV_ACR_NAME }}
      TF_VAR_image_name: ${{ secrets.TF_DEV_IMAGE_NAME }}
      TF_VAR_sql_admin: ${{ secrets.TF_DEV_SQL_ADMIN }}
      TF_VAR_sql_password: ${{ secrets.TF_DEV_SQL_PASSWORD }}
      TF_VAR_keyvault_name: ${{ secrets.TF_DEV_KEYVAULT_NAME }}

    steps:
      - name: test1
        run: echo "AZURE_CLIENT_ID:AZURE_CLIENT_ID"
        env:
            AZURE_CLIENT_ID: ${{secrets.AZURE_CLIENT_ID}}
      - name: test2
        run: echo "AZURE_CLIENT_SECRET:AZURE_CLIENT_SECRET"
        env:
          AZURE_CLIENT_SECRET: ${{secrets.AZURE_CLIENT_SECRET}}
      - name: test3
        run: echo "AZURE_SUBSCRIPTION_ID:AZURE_SUBSCRIPTION_ID"
        env:
          AZURE_SUBSCRIPTION_ID: ${{secrets.AZURE_SUBSCRIPTION_ID}}
      - name: test4
        run: echo "AZURE_TENANT_ID:AZURE_TENANT_ID"
        env:
          AZURE_TENANT_ID: ${{secrets.AZURE_TENANT_ID}}
      - name: test5
        run: echo "DB_DRIVER:DB_DRIVER"
        env:
          DB_DRIVER: ${{secrets.DB_DRIVER}}
      - name: test6
        run: echo "KEY_VAULT_NAME:KEY_VAULT_NAME"
        env:
          KEY_VAULT_NAME: ${{secrets.KEY_VAULT_NAME}}
      - name: test7
        run: echo "LOG_DATETIME_FORMAT:LOG_DATETIME_FORMAT"
        env:
          LOG_DATETIME_FORMAT: ${{secrets.LOG_DATETIME_FORMAT}}
      - name: test8
        run: echo "LOG_FORMAT:LOG_FORMAT"
        env:
          LOG_FORMAT: ${{secrets.LOG_FORMAT}}
      - name: test9
        run: echo "PYTHONPATH:PYTHONPATH"
        env:
          PYTHONPATH: ${{secrets.PYTHONPATH}}
      - name: test10
        run: echo "REGISTRY_PASSWORD:REGISTRY_PASSWORD"
        env:
          REGISTRY_PASSWORD: ${{secrets.REGISTRY_PASSWORD}}
      - name: test11
        run: echo "REGISTRY_USERNAME:REGISTRY_USERNAME"
        env:
          REGISTRY_USERNAME: ${{secrets.REGISTRY_USERNAME}}
      - name: test12
        run: echo "TF_DEV_ACR_NAME:TF_DEV_ACR_NAME"
        env:
          TF_DEV_ACR_NAME: ${{secrets.TF_DEV_ACR_NAME}}
      - name: test13
        run: echo "TF_DEV_ENV:TF_DEV_ENV"
        env:
          TF_DEV_ENV: ${{secrets.TF_DEV_ENV}}
      - name: test14
        run: echo "TF_DEV_IMAGE_NAME:TF_DEV_IMAGE_NAME"
        env:
          TF_DEV_IMAGE_NAME: ${{secrets.TF_DEV_IMAGE_NAME}}
      - name: test15
        run: echo "TF_DEV_KEYVAULT_NAME:TF_DEV_KEYVAULT_NAME"
        env:
          TF_DEV_KEYVAULT_NAME: ${{secrets.TF_DEV_KEYVAULT_NAME}}
      - name: test16
        run: echo "TF_DEV_LOCATION:TF_DEV_LOCATION"
        env:
          TF_DEV_LOCATION: ${{secrets.TF_DEV_LOCATION}}
      - name: test17
        run: echo "TF_DEV_PROJECT_NAME:TF_DEV_PROJECT_NAME"
        env:
          TF_DEV_PROJECT_NAME: ${{secrets.TF_DEV_PROJECT_NAME}}
      - name: test18
        run: echo "TF_DEV_RESOURCE_GROUP_NAME:TF_DEV_RESOURCE_GROUP_NAME"
        env:
          TF_DEV_RESOURCE_GROUP_NAME: ${{secrets.TF_DEV_RESOURCE_GROUP_NAME}}
      - name: test19
        run: echo "TF_DEV_SQL_ADMIN:TF_DEV_SQL_ADMIN"
        env:
          TF_DEV_SQL_ADMIN: ${{secrets.TF_DEV_SQL_ADMIN}}
      - name: test20
        run: echo "TF_DEV_SQL_PASSWORD:TF_DEV_SQL_PASSWORD"
        env:
          TF_DEV_SQL_PASSWORD: ${{secrets.TF_DEV_SQL_PASSWORD}}

      - name: üîÑ Checkout repository
        uses: actions/checkout@v4

      - name: üîê Azure Login with OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: üß± Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Test Blob Access
        run: |
          az storage blob list --account-name figfigtfstatedev --container-name tfstate --auth-mode login


      - name: üöÄ Terraform Init
        working-directory: terraform
        run: terraform init -backend-config="envs/dev/backend.tf"

      - name: ‚öôÔ∏è Terraform Apply Core (Network, RG)
        working-directory: terraform
        run: terraform apply -auto-approve -lock-timeout=300s -target="azurerm_resource_group.main" -target="module.network" -lock=false

      - name: ‚öôÔ∏è Terraform ACR 
        working-directory: terraform
        run: terraform apply -auto-approve -lock-timeout=300s  -target="module.acr"

#      - name: ‚öôÔ∏è Terraform containers 
#        working-directory: terraform
#        run: terraform apply -auto-approve -lock-timeout=300s  -target="module.containers"

      - name: üîë Docker Login to ACR
        run: az acr login --name ${{ secrets.TF_DEV_ACR_NAME }}dev
        

      - name: üõ† Build Docker Image
        run: docker build -f docker/Dockerfile --build-arg ENV=dev -t ${{ secrets.TF_DEV_ACR_NAME }}dev.azurecr.io/figfig-app:latest .

      - name: üì§ Push Docker Image
        run: docker push ${{ secrets.TF_DEV_ACR_NAME }}dev.azurecr.io/figfig-app:latest

      - name: üîì Cleanup State Lock (if needed)
        if: failure()
        working-directory: terraform
        run: |
          echo "üîÑ Attempting to unlock state (if locked)..."
          LOCK_ID=$(terraform force-unlock --dry-run 2>&1 | grep -oP 'Lock ID: \K\S+') || true
          if [ ! -z "$LOCK_ID" ]; then
            echo "‚ö†Ô∏è Unlocking stuck state with ID: $LOCK_ID"
            terraform force-unlock -force "$LOCK_ID"
          else
            echo "‚úÖ No lock found."
          fi

  deploy-infra:
    runs-on: ubuntu-latest
    needs: build-image
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_USE_OIDC: true
      TF_VAR_USE_OIDC: true
      TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
      TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
      TF_VAR_env: dev
      TF_VAR_location: ${{ secrets.TF_DEV_LOCATION }}
      TF_VAR_project_name: ${{ secrets.TF_DEV_PROJECT_NAME }}
      TF_VAR_resource_group_name: ${{ secrets.TF_DEV_RESOURCE_GROUP_NAME }}
      TF_VAR_acr_name: ${{ secrets.TF_DEV_ACR_NAME }}
      TF_VAR_image_name: ${{ secrets.TF_DEV_IMAGE_NAME }}
      TF_VAR_sql_admin: ${{ secrets.TF_DEV_SQL_ADMIN }}
      TF_VAR_sql_password: ${{ secrets.TF_DEV_SQL_PASSWORD }}
      TF_VAR_keyvault_name: ${{ secrets.TF_DEV_KEYVAULT_NAME }}

    steps:
      - name: üîÑ Checkout repository
        uses: actions/checkout@v4

      - name: üîê Azure Login with OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: üß± Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: üöÄ Terraform Init
        working-directory: terraform
        run: terraform init -backend-config="envs/dev/backend.tf"

      - name: üß¨ Import existing Key Vault secrets (if needed)
        working-directory: terraform
        shell: bash
        run: |
          echo "üîç Checking if secrets exist in Azure and importing if necessary..."

          set -e

          DB_SECRET="${{ secrets.TF_DEV_KEYVAULT_NAME }}/db-password"
          SB_SECRET="${{ secrets.TF_DEV_KEYVAULT_NAME }}/servicebus-conn-string"

          echo "Importing db-password..."
          if az keyvault secret show --vault-name "${{ secrets.TF_DEV_KEYVAULT_NAME }}" --name "db-password" > /dev/null 2>&1; then
            terraform import "module.keyvault.azurerm_key_vault_secret.sql" "$DB_SECRET"
          else
            echo "‚ö†Ô∏è db-password not found in Key Vault, skipping import"
          fi

          echo "Importing servicebus-conn-string..."
          if az keyvault secret show --vault-name "${{ secrets.TF_DEV_KEYVAULT_NAME }}" --name "servicebus-conn-string" > /dev/null 2>&1; then
            terraform import "module.keyvault.azurerm_key_vault_secret.sb_conn" "$SB_SECRET"
          else
            echo "‚ö†Ô∏è servicebus-conn-string not found in Key Vault, skipping import"
          fi


      - name: üîÑ Refresh Terraform State
        working-directory: terraform
        run: terraform refresh

      - name: ‚öôÔ∏è Terraform Apply Remaining Infra
        working-directory: terraform
        run: terraform apply -auto-approve -lock-timeout=300s

      - name: üîì Cleanup State Lock (if needed)
        if: failure()
        working-directory: terraform
        run: |
          echo "üîÑ Attempting to unlock state (if locked)..."
          LOCK_ID=$(terraform force-unlock --dry-run 2>&1 | grep -oP 'Lock ID: \K\S+') || true
          if [ ! -z "$LOCK_ID" ]; then
            echo "‚ö†Ô∏è Unlocking stuck state with ID: $LOCK_ID"
            terraform force-unlock -force "$LOCK_ID"
          else
            echo "‚úÖ No lock found."
          fi
